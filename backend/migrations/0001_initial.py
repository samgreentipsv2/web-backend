# Generated by Django 4.1.3 on 2023-04-17 02:08

import datetime
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Categories',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category_name', models.CharField(blank=True, max_length=300, null=True, verbose_name='vip_category')),
            ],
        ),
        migrations.CreateModel(
            name='Free_Inplay_Odds',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('match', models.CharField(blank=True, max_length=300)),
                ('prediction', models.CharField(blank=True, max_length=300)),
                ('time', models.DateTimeField(blank=True, default='Mon Apr 17 02:08:23 2023')),
            ],
        ),
        migrations.CreateModel(
            name='FreeCategories',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category_name', models.CharField(blank=True, max_length=300, null=True, verbose_name='free_category')),
            ],
        ),
        migrations.CreateModel(
            name='Plan',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=300)),
                ('price', models.DecimalField(blank=True, decimal_places=2, default=0, max_digits=9, null=True)),
                ('duration', models.DurationField(blank=True, default=datetime.timedelta(days=7), null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Vip_games',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('match', models.CharField(blank=True, max_length=300)),
                ('Prediction', models.CharField(blank=True, max_length=300, verbose_name='vip category')),
                ('odd', models.DecimalField(blank=True, decimal_places=2, default=0, max_digits=3, null=True)),
                ('time', models.DateTimeField(blank=True, default='Mon Apr 17 02:08:23 2023', null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Vip_Odds',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('total_odds', models.DecimalField(blank=True, decimal_places=2, default=0, max_digits=3, null=True)),
                ('betking_code', models.CharField(blank=True, max_length=30)),
                ('onexbet_code', models.CharField(blank=True, max_length=30, verbose_name='1xbet code')),
                ('twentytwobet_code', models.CharField(blank=True, max_length=30, verbose_name='22bet code')),
                ('sportybet_code', models.CharField(blank=True, max_length=30)),
                ('bet9ja_code', models.CharField(blank=True, max_length=30)),
                ('Helabet_code', models.CharField(blank=True, max_length=30)),
                ('date', models.DateField(blank=True, null=True)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='odds_categories', to='backend.categories')),
                ('games', models.ManyToManyField(blank=True, null=True, to='backend.vip_games')),
            ],
        ),
        migrations.CreateModel(
            name='Game',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('match', models.CharField(blank=True, max_length=300)),
                ('odd', models.DecimalField(blank=True, decimal_places=2, default=0, max_digits=3, null=True)),
                ('time', models.DateTimeField(blank=True, default='Mon Apr 17 02:08:23 2023')),
                ('is_betoftheday', models.BooleanField(blank=True, null=True)),
                ('category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='free_categories', to='backend.freecategories')),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('email', models.EmailField(max_length=255, unique=True)),
                ('first_name', models.CharField(blank=True, max_length=55, null=True)),
                ('last_name', models.CharField(blank=True, max_length=55, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('is_vip', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('plan_sub', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='subscribed_to', to='backend.plan')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
        ),
    ]
